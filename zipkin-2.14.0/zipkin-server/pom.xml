<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.apache.zipkin</groupId>
    <artifactId>zipkin-parent</artifactId>
    <version>2.14.0</version>
  </parent>

  <artifactId>zipkin-server</artifactId>
  <name>Zipkin Server</name>

  <properties>
    <main.basedir>${project.basedir}/..</main.basedir>
    <main.java.version>1.8</main.java.version>
    <main.signature.artifact>java18</main.signature.artifact>
    <kotlin.version>1.3.31</kotlin.version>
    <maven-invoker-plugin.version>3.2.0</maven-invoker-plugin.version>
    <proto.generatedSourceDirectory>${project.build.directory}/generated-test-sources/wire</proto.generatedSourceDirectory>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.linecorp.armeria</groupId>
        <artifactId>armeria-bom</artifactId>
        <version>${armeria.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
      <version>${spring-boot.version}</version>
    </dependency>

    <!-- Use log4j 2 instead of SLF4J to allow log4j 1.2 used by Kafka 0.8 to still work -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-log4j2</artifactId>
      <version>${spring-boot.version}</version>
    </dependency>

    <!-- More efficient, gRPC ready server with brave tracing built-in -->
    <dependency>
      <groupId>com.linecorp.armeria</groupId>
      <artifactId>armeria-spring-boot-autoconfigure</artifactId>
    </dependency>
    <dependency>
      <groupId>com.linecorp.armeria</groupId>
      <artifactId>armeria-spring-boot-actuator-starter</artifactId>
    </dependency>
    <dependency>
      <groupId>com.linecorp.armeria</groupId>
      <artifactId>armeria-zipkin</artifactId>
    </dependency>
    <dependency>
      <groupId>com.linecorp.armeria</groupId>
      <artifactId>armeria-grpc-protocol</artifactId>
    </dependency>

    <!-- zipkin requires exporting /health endpoint -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
      <version>${spring-boot.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <version>${spring-boot.version}</version>
      <optional>true</optional>
    </dependency>

    <dependency>
      <groupId>${project.groupId}.zipkin2</groupId>
      <artifactId>zipkin</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <groupId>${project.groupId}.zipkin2</groupId>
      <artifactId>zipkin-collector</artifactId>
      <version>${project.version}</version>
    </dependency>

    <!-- Static content for the web UI -->
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>zipkin-ui</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>zipkin-lens</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <!-- HTML library for injecting configurable <base> tag -->
      <groupId>org.jsoup</groupId>
      <artifactId>jsoup</artifactId>
      <version>1.12.1</version>
    </dependency>

    <!-- to test the experimental grpc endpoint with the square/wire library -->
    <dependency>
      <groupId>org.apache.zipkin.proto3</groupId>
      <artifactId>zipkin-proto3</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.squareup.wire</groupId>
      <artifactId>wire-grpc-client</artifactId>
      <version>${wire.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib</artifactId>
      <version>${kotlin.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Cassandra and Cassandra 3 backends -->
    <dependency>
      <groupId>${project.groupId}.zipkin2</groupId>
      <artifactId>zipkin-storage-cassandra-v1</artifactId>
      <version>${project.version}</version>
      <optional>true</optional>
      <exclusions>
        <exclusion>
          <groupId>com.datastax.cassandra</groupId>
          <artifactId>cassandra-driver-core</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <!-- shaded to not interfere with netty 4.1 and boringssl. [JAVA-1241] -->
    <dependency>
      <groupId>com.datastax.cassandra</groupId>
      <artifactId>cassandra-driver-core</artifactId>
      <version>${cassandra-driver-core.version}</version>
      <classifier>shaded</classifier>
      <optional>true</optional>
      <exclusions>
        <exclusion>
          <groupId>io.netty</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.datastax.cassandra</groupId>
      <artifactId>cassandra-driver-mapping</artifactId>
      <version>${cassandra-driver-core.version}</version>
      <optional>true</optional>
      <exclusions>
        <exclusion>
          <groupId>com.datastax.cassandra</groupId>
          <artifactId>cassandra-driver-core</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Elasticsearch http -->
    <dependency>
      <groupId>${project.groupId}.zipkin2</groupId>
      <artifactId>zipkin-storage-elasticsearch</artifactId>
      <version>${project.version}</version>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>com.squareup.okhttp3</groupId>
      <artifactId>okhttp</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>com.squareup.okhttp3</groupId>
      <artifactId>logging-interceptor</artifactId>
      <version>${okhttp.version}</version>
      <optional>true</optional>
    </dependency>

    <!-- MySQL backend -->
    <dependency>
      <groupId>${project.groupId}.zipkin2</groupId>
      <artifactId>zipkin-storage-mysql-v1</artifactId>
      <version>${project.version}</version>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.mariadb.jdbc</groupId>
      <artifactId>mariadb-java-client</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>com.zaxxer</groupId>
      <artifactId>HikariCP</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- Kafka Collector -->
    <dependency>
      <groupId>${project.groupId}.zipkin2</groupId>
      <artifactId>zipkin-collector-kafka</artifactId>
      <version>${project.version}</version>
      <optional>true</optional>
    </dependency>

    <!-- RabbitMQ Collector -->
    <dependency>
      <groupId>${project.groupId}.zipkin2</groupId>
      <artifactId>zipkin-collector-rabbitmq</artifactId>
      <version>${project.version}</version>
      <optional>true</optional>
    </dependency>

    <!-- Scribe Collector -->
    <dependency>
      <groupId>${project.groupId}.zipkin2</groupId>
      <artifactId>zipkin-collector-scribe</artifactId>
      <version>${project.version}</version>
      <optional>true</optional>
    </dependency>

    <!--Prometheus metrics-->
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
      <version>${micrometer.version}</version>
    </dependency>

    <dependency>
      <groupId>com.netflix.concurrency-limits</groupId>
      <artifactId>concurrency-limits-core</artifactId>
      <version>0.3.0</version>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-core</artifactId>
      <version>${micrometer.version}</version>
    </dependency>

    <!-- Trace api controller activity with Brave -->
    <dependency>
      <groupId>io.zipkin.brave</groupId>
      <artifactId>brave</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>io.zipkin.brave</groupId>
      <artifactId>brave-instrumentation-okhttp3</artifactId>
      <version>${brave.version}</version>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>io.zipkin.brave</groupId>
      <artifactId>brave-context-log4j2</artifactId>
      <version>${brave.version}</version>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.apache.zipkin.brave.cassandra</groupId>
      <artifactId>brave-instrumentation-cassandra-driver</artifactId>
      <version>0.10.2</version>
      <optional>true</optional>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <version>${spring-boot.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.zipkin.zipkin2</groupId>
      <artifactId>zipkin-tests</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.squareup.okhttp3</groupId>
      <artifactId>mockwebserver</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.jayway.jsonpath</groupId>
      <artifactId>json-path</artifactId>
      <version>2.4.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>integration</id>
      <activation>
        <property>
          <name>!skipTests</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-invoker-plugin</artifactId>
            <version>${maven-invoker-plugin.version}</version>
            <configuration>
              <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>
              <settingsFile>src/it/settings.xml</settingsFile>
              <localRepositoryPath>${project.build.directory}/local-repo</localRepositoryPath>
              <postBuildHookScript>verify</postBuildHookScript>
              <addTestClassPath>true</addTestClassPath>
              <skipInvocation>${skipTests}</skipInvocation>
              <streamLogs>true</streamLogs>
            </configuration>
            <executions>
              <execution>
                <id>integration-test</id>
                <goals>
                  <goal>install</goal>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <plugins>
      <!-- wire-maven-plugin cannot get proto definitions from dependencies, so we will -->
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>com.squareup.wire</groupId>
        <artifactId>wire-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>generate-sources</goal>
            </goals>
            <configuration>
              <generatedSourceDirectory>${proto.generatedSourceDirectory}</generatedSourceDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <version>${kotlin.version}</version>
        <configuration>
          <jvmTarget>${main.java.version}</jvmTarget>
        </configuration>
        <executions>
          <execution>
            <id>compile</id>
            <phase>none</phase>
          </execution>
          <execution>
            <id>test-compile</id>
            <goals>
              <goal>test-compile</goal>
            </goals>
            <configuration>
              <sourceDirs>
                <sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
                <!-- TODO: this is java, but... https://github.com/square/wire/issues/953 -->
                <sourceDir>${proto.generatedSourceDirectory}</sourceDir>
              </sourceDirs>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Adds the output directory from proto source generation for the test compiler -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <execution>
            <id>add-test-source</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${proto.generatedSourceDirectory}</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
        <executions>
          <!-- Defer test compilation to the kotlin plugin -->
          <execution>
            <id>default-testCompile</id>
            <phase>none</phase>
          </execution>
          <execution>
            <id>java-test-compile</id>
            <phase>test-compile</phase>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${spring-boot.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <mainClass>zipkin.server.ZipkinServer</mainClass>
          <classifier>exec</classifier>
          <executable>true</executable>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-remote-resources-plugin</artifactId>
        <configuration>
          <skip>false</skip>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
